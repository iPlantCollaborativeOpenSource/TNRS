<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:spring="http://www.springframework.org/schema/beans"
    xmlns:http="http://www.mulesource.org/schema/mule/http/2.2"
    xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
    xmlns:stdio="http://www.mulesource.org/schema/mule/stdio/2.2"
        xmlns:client="http://www.mulesource.org/schema/mule/client/2.2"
            xmlns:management="http://www.mulesource.org/schema/mule/management/2.2"
            xmlns:scripting="http://www.mulesource.org/schema/mule/scripting/2.2"
            xmlns:sxc="http://www.mulesource.org/schema/mule/sxc/2.2"
            xmlns:mule-xml="http://www.mulesource.org/schema/mule/xml/2.2"
            xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="
       http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
       http://www.mulesource.org/schema/mule/http/2.2 http://www.mulesource.org/schema/mule/http/2.2/mule-http.xsd
       http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
       http://www.mulesource.org/schema/mule/stdio/2.2 http://www.mulesource.org/schema/mule/stdio/2.2/mule-stdio.xsd
       http://www.mulesource.org/schema/mule/client/2.2 http://www.mulesource.org/schema/mule/client/2.2/mule-client.xsd
       http://www.mulesource.org/schema/mule/management/2.2 http://www.mulesource.org/schema/mule/management/2.2/mule-management.xsd
       http://www.mulesource.org/schema/mule/scripting/2.2 http://www.mulesource.org/schema/mule/scripting/2.2/mule-scripting.xsd
       http://www.mulesource.org/schema/mule/sxc/2.2 http://www.mulesource.org/schema/mule/sxc/2.2/mule-sxc.xsd
       http://www.mulesource.org/schema/mule/xml/2.2 http://www.mulesource.org/schema/mule/xml/2.2/mule-xml.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

    <description>
    Holds the Tnrs middle tier services
    </description>

    <http:connector name="HttpConn" serverSoTimeout="0" clientSoTimeout="0"   />

 

    <context:property-placeholder location="tnrs.properties" />
    
    <message-properties-transformer name="setCsvContentType">
        <delete-message-property key="content-type"/>
        <add-message-property key="Content-Type" value="application/csv"/>
        <add-message-property key="Content-Disposition" value="attachment;filename=tnrs_results.csv"/>
        <add-message-property key="Charset" value="UTF-8" />
        <add-message-property key="Content-Transfer-Encoding" value="binary"/>
    </message-properties-transformer>
    
    <message-properties-transformer name="setJSONContentType">
        <delete-message-property key="content-type"/>
        <add-message-property key="Content-Type" value="application/json"/>
    </message-properties-transformer>

    <message-properties-transformer name="multipartUnicode">
        <delete-message-property key="content-type"/>
        <add-message-property key="Content-Type" value="multipart/form-data; charset=utf-8"/>
    </message-properties-transformer>
    
    <custom-transformer name="HttpParams" class="org.mule.transport.http.transformers.HttpRequestBodyToParamMap" />
    <custom-transformer class="org.iplantc.tnrs.transform.PlainStringToCompressedBASE64Transformer" name="compressBody"/>
    <custom-transformer class="org.iplantc.tnrs.transform.TaxamatchOuputTransformer" name="TaxaMatchOutputTransformer" />
    <custom-transformer class="org.iplantc.tnrs.transform.DebugTransformer" name="debug"/>
    <custom-transformer class="org.iplantc.tnrs.transform.DownloadPropertiesTransformer" name="download_properties"/>
    
    <spring:beans xmlns="http://www.springframework.org/schema/beans">
        
        <bean name="tnrsService" class="org.iplantc.tnrs.service.TNRSService" >
            <property name="serviceHost" value="${org.iplantc.tnrs.hosturl}" />
            <property name="tnrsUrl" value="${org.iplantc.tnrs.taxamatchurl}" />
        </bean>
        
    </spring:beans>
    
    <model name="main">
        
        
        
       <service name="submit query">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/submitNames" method="POST" synchronous="true" transformer-refs="debug" responseTransformer-refs="TaxaMatchOutputTransformer setJSONContentType">
                   <byte-array-to-string-transformer/>
                </http:inbound-endpoint>
            </inbound>
          
           <component >
                <method-entry-point-resolver>
                    <include-entry-point method="executeTNRSJob"/>
                </method-entry-point-resolver>
               <spring-object bean="tnrsService" />
            </component>
            
          
        </service>
        
        
        <service name="Upload file">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/uploadfile" method="POST" contentType="multipart/form-data" transformer-refs="debug" >
                    <byte-array-to-string-transformer/>
                </http:inbound-endpoint>
            </inbound>
            <echo-component/>
        </service>
        
        
    
        <service name="Get CSV file name">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/download" method="POST"  synchronous="true"  responseTimeout="0">
                    <byte-array-to-string-transformer/>
                </http:inbound-endpoint>
            </inbound>
            
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="persistToCSV"/>
                </method-entry-point-resolver>
                <spring-object bean="tnrsService" />
            </component>
        </service>
        
        <!--<service name="public query tnrs">
            <inbound >
                <http:inbound-endpoint address="http://localhost:14444/tnrs/query" method="POST" synchronous="false" />
            </inbound>
            <component>
                
            </component>
        </service>-->


        


        <service name="Return file data">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/getcsv" method="GET" contentType="application/x-www-form-urlencoded" responseTransformer-refs="download_properties debug">
                    <custom-transformer name="myTransformer" class="org.mule.transport.http.transformers.HttpRequestBodyToParamMap" />
                </http:inbound-endpoint>
            </inbound>
            <component >
                <method-entry-point-resolver>
                    <include-entry-point method="getCsvContents"/>
                </method-entry-point-resolver>
                <spring-object bean="tnrsService" />
            </component>
        </service>
        
        
        <service name="Upload file for batch processing">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/upload" method="POST" encoding="ISO-8859-1"/>
            </inbound>
            <outbound>
                <chaining-router>
                    <http:outbound-endpoint address="http://localhost:14445/upload" transformer-refs="debug" />
                </chaining-router>
            </outbound>
        </service>
        
        
        <service name="Check the status of a job">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/status" method="POST"  synchronous="true" encoding="UTF-8"/>
            </inbound>
            <outbound>
                <chaining-router>
                    <http:outbound-endpoint address="http://localhost:14445/status"  synchronous="true"/>
                </chaining-router>
            </outbound>
        </service>
        
        
        <service name="Execute an XML query">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/query" contentType="application/xml" synchronous="true" method="POST" responseTransformer-refs="setJSONContentType" >
                    <byte-array-to-string-transformer/>
                </http:inbound-endpoint>
                   
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="xmlNameMatchQuery"/>
                </method-entry-point-resolver>
                <spring-object bean="tnrsService" />
            </component>
        </service>
        
        <service name="Execute a get query">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/matchNames" method="GET" synchronous="true" transformer-refs="HttpParams"/>
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="getNameMatchQuery"/>
                </method-entry-point-resolver>
                <spring-object bean="tnrsService" />
                
            </component>
            
        </service>
        
        
        <service name="Heartbeat">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/heartbeat" method="GET" synchronous="true" />
            </inbound>
            <echo-component/>
            
        </service>
        
        <service name="Return a chunk of data from a batch job">
            <inbound>
                <http:inbound-endpoint address="http://localhost:14444/retrievedata" synchronous="true" method="POST"  />
            </inbound>
            <outbound>
                <chaining-router>
                    <http:outbound-endpoint address="http://localhost:14445/retrievedata" method="POST" synchronous="true" responseTransformer-refs="setJSONContentType" /> 
                </chaining-router>
            </outbound>
        </service>

    </model>

</mule>
